{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"scope": "vue",
		"prefix": "vtc",
		"body": [
			"<template>",
			"  <div>",
			"    {{msg}}",
			"    {{propB}}",
			"    {{PropA}}",
			"  </div>",
			"</template>",
			"<script lang=\"ts\">",
			"import Vue from 'vue'",
			"import {Component, Emit, Prop, Watch} from 'vue-property-decorator'",
			"@Component",
			"export default class $1 extends Vue {",
			"  // 声明内部变量",
			"  msg = 'Welcome to Your Vue.js App';",
			"  // 声明父组件传入",
			"  @Prop()",
			"  PropA:string = 'hello';",
			"  // 如果没有传入值时的默认值",
			"  @Prop({ default: '你好' })",
			"  propB: string",
			"  // 声明可以接收多种数据类型",
			"  @Prop([String, Boolean])",
			"  propC: string | boolean",
			"  // 声明方法",
			"  @Emit()",
			"  demo (ss:string) {",
			"  ",
			"  }",
			"  // 声明监听",
			"  @Watch('$2', { immediate: true, deep: true })",
			"  // 监听器调用的方法",
			"  on$2Changed (val: string, oldVal: string) {",
			"  ",
			"  }",
			"  // 页面加载完成钩子函数",
			"  mounted () {",
			"  alert('页面钩子函数')",
			"  }",
			"  // 页面创建钩子函数",
			"  created () {",
			"    alert('页面创建钩子')",
			"  }",
			"}",
			"</script>",
			"<style scoped>",
			"</style>",
		],
		"description": "Log output to console"
	}
}